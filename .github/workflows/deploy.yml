name: 🚀 Deploy Full Stack App

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # ============================================================================
  # TESTS
  # ============================================================================
  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json

      - name: 📋 Install dependencies
        working-directory: ./Client
        run: npm ci

      - name: 🔍 Lint code
        working-directory: ./Client
        run: npm run lint --if-present

      - name: 🧪 Run tests
        working-directory: ./Client
        run: npm run test --if-present

  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📋 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🧪 Run tests
        working-directory: ./Server
        run: ./mvnw test

  # ============================================================================
  # BUILD & DEPLOY FRONTEND
  # ============================================================================
  deploy-frontend:
    name: 🌐 Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Client/package-lock.json

      - name: 📋 Install dependencies
        working-directory: ./Client
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: ./Client
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./Client
          vercel-args: '--prod'

  # ============================================================================
  # BUILD & DEPLOY BACKEND
  # ============================================================================
  deploy-backend:
    name: 🖥️ Deploy Backend to Railway
    runs-on: ubuntu-latest
    needs: [test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📋 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🏗️ Build backend
        working-directory: ./Server
        run: ./mvnw clean package -DskipTests

      - name: 🚀 Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: 'gestion-guardias-backend'

  # ============================================================================
  # HEALTH CHECKS
  # ============================================================================
  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 🌐 Check Frontend Health
        run: |
          curl -f ${{ secrets.PROD_FRONTEND_URL }}/health || exit 1
          echo "✅ Frontend is healthy"

      - name: 🖥️ Check Backend Health  
        run: |
          curl -f ${{ secrets.PROD_BACKEND_URL }}/actuator/health || exit 1
          echo "✅ Backend is healthy"

      - name: 📊 Check Database Connection
        run: |
          curl -f ${{ secrets.PROD_BACKEND_URL }}/api/health/db || exit 1
          echo "✅ Database is connected"

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📧 Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Deployment completed!
            Frontend: ${{ secrets.PROD_FRONTEND_URL }}
            Backend: ${{ secrets.PROD_BACKEND_URL }}
            Status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
